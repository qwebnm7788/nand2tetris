// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //zx=0이면 0을 선택
    Mux16(a=x,b=false,sel=zx,out=Afterzx);

    //zx이후 negate 한것과 하지 않은것을 nx를 기준으로 선택
    Not16(in=Afterzx,out=NotAfterzx);
    Mux16(a=Afterzx,b=NotAfterzx,sel=nx,out=Afternx);
	
    //zy=0이면 0을 선택
    Mux16(a=y,b=false,sel=zy,out=Afterzy);

    //마찬가지로 zy이후 ny를 기준으로 선택
    Not16(in=Afterzy,out=NotAfterzy);
    Mux16(a=Afterzy,b=NotAfterzy,sel=ny,out=Afterny);

    //f를 기준으로 add연산과 and연산 중 하나를 선택
    Add16(a=Afternx,b=Afterny,out=Addxy);
    And16(a=Afternx,b=Afterny,out=Andxy);
    Mux16(a=Andxy,b=Addxy,sel=f,out=Afterf);

    //no을 기준으로 negate의 여부를 선택
    Not16(in=Afterf,out=NotAfterf);
    //여기서 ng와 zr의 선택을 위하여 상위8비트,하위8비트,MSB비트를 따로 저장해둔다
    (inner node의 sub node를 사용할 수 없고, out자체도 사용할 수 없다고 나오기 때문에 따로 다른 변수에 저장해야 한다)
    Mux16(a=Afterf,b=NotAfterf,sel=no,out=out,out[0..7]=right8Bit,out[8..15]=left8Bit,out[15]=negative);

    //zr의 설정을 위해 out의 모든 비트를 서로 OR연산하여 zr을 설정한다.
    Or8Way(in=right8Bit,out=tempRight);
    Or8Way(in=left8Bit,out=tempLeft);
    Or(a=tempRight,b=tempLeft,out=zeroCheck);

    //MSB=1이면 ng = 1이고 MSB=0이면 ng = 0이다.
    Mux(a=true,b=false,sel=zeroCheck,out=zr);
    Mux(a=false,b=true,sel=negative,out=ng);
}